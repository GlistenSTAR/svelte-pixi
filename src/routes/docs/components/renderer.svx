---
title: Renderer
pixi: https://pixijs.download/release/docs/PIXI.Renderer.html
---

This is an alternative to using the [Application](/docs/components/application) component, where you might desire more control over the renderer. It does not automatically render for you nor does it create the root Container, so you will have to set those up as well.

## Usage

```svelte example csr noApp
<script>
  import { Renderer, Container, Ticker, Text } from 'svelte-pixi'

  let renderer
  let stage

</script>

<Renderer
  bind:instance={renderer}
  bind:stage={stage}
  width={400}
  height={400}
  antialias
>
  <Container bind:instance={stage}>
    <Ticker
      on:tick={() => {
        renderer.render(stage)
      }}>
      <Text
        x={200}
        y={200}
        text="Hello World"
        style={{ fill: 'white' }}
        anchor={0.5}
      />
    </Ticker>
  </Container>
</Renderer>
```

## Custom View

If you want to customize the element that the canvas is rendered into, you can use the `view` slot. The canvas will be appended as a child of the slot element.

```svelte example csr noApp
<script>
  import { Renderer, Container, Ticker, Text } from 'svelte-pixi'

  let renderer
  let stage
</script>

<Renderer
  bind:instance={renderer}
  bind:stage={stage}
  width={400}
  height={400}
  antialias
>
  <div slot="view" class="custom">
    <!-- canvas will be placed here -->
  </div>

  <!-- pixi components go here -->
  <Container bind:instance={stage}>
    <Ticker
      on:tick={() => {
        renderer.render(stage)
      }} />
    <Text
      x={200}
      y={200}
      anchor={0.5}
      text="Hello World"
      style={{ fill: 'white'}} />
    </Container>
</Renderer>

<style>
  .custom :global(canvas) {
    border: 5px solid tomato;
    border-radius: 5px;
  }
</style>
```
