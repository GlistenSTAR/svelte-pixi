---
title: Binding Props
---

<script>
  import Code from '$lib/site/Code.svelte'
  import bballSrc from '$lib/site/BouncingBall.svelte?raw'
</script>

You may want to bind to properties of the underlying PxiJS instance, such as `x` or `y`. Unfortunately, SveltePixi does not support binding to instance props as it causes too much performance overhead (it would have to sync all props on every tick, regardless of which ones have `bind:`)

As a workaround, most SveltePixi components provide a `track` prop that can help achieve this. It should be an object of writable stores, where each key is the prop you want to "bind" to. Those stores get updated to match the instance's value after every tick. You can effectively bind by passing those stores back down as a prop.

```svelte example csr
<script>
  import { onMount } from 'svelte'
  import { Container, Text, onTick } from 'svelte-pixi'
  import { writable } from 'svelte/store'
  import BouncingBall from '$lib/site/BouncingBall.svelte'

  let instance

  // tracked properties must be writables
  let x = writable(200)
  let y = writable(200)
</script>

<BouncingBall x={$x} y={$y} track={{ x, y }} >
  <Text
    y={$y > 200 ? -75 : 75}
    text={`${Math.round($x)}, ${Math.round($y)}`}
    style={{ fill: 'white' }}
    anchor={0.5}
  />
</BouncingBall>
```

<Code src={'<!-- BouncingBall.svelte -->\n'+bballSrc} />

It's not as nice as using `bind:` syntax but it is significantly more performant.

## Caveats

- Only instance properties are trackable

  - If a component exposes a prop that is not assigned to the underlying PixiJS instance, it will not be tracked.

- Custom components need to pass `track` to their child SveltePixi components if you want to track through them (as BouncingBall does)

- If no Ticker exists in your application then `track` will update during the Renderer's `postrender` event.
