---
title: Binding Props
---

<script>
  import Code from '$lib/site/Code.svelte'
  import bballSrc from '$lib/site/BouncingBall.svelte?raw'
</script>

When a component's PixiJS instance is mutated it would be helpful have its props stay in sync (for example, if you're using a physics system where forces can be applied externally). You might expect to be able to use the `bind:` syntax on SveltePixi components... but it won't work! The only bindable property is `instance`. This is because it would have to track each available prop in a ticker, regardless if they are bound or not, and that would cause notable performance degradation at scale.

Instead, SveltePixi provides a `track` utility function that will allow you to achieve similiar behaviour. It returns a writable store that updates with the instance property after every tick. You can pass that store back down as a prop to effectively achieve binding in a performant way.

```svelte example csr hideStyle
<script>
  import * as PIXI from 'pixi.js'
  import { Container, Text, track, Graphics } from 'svelte-pixi'
  import { writable } from 'svelte/store'
  import BouncePhysics from '$lib/site/BouncePhysics.svelte'

  let instance

  let x = track(() => instance, 'x', 200)
  let y = track(() => instance, 'y', 200)

  function reset() {
    $x = 200
    $y = 200
  }
</script>

<Graphics
  bind:instance
  x={$x}
  y={$y}
  pivot={0.5}
  draw={(graphics) => {
    graphics.clear()
    graphics.beginFill(0xde3249)
    graphics.drawCircle(0, 0, 50)
    graphics.endFill()
  }}
>
  <!-- adds velocity to Graphics instance -->
  <BouncePhysics
    velocity={{
      x: Math.random() + 2,
      y: Math.random() + 2
    }}
  />
</Graphics>
<Text
  x={$x}
  y={$y >= 200 ? $y - 75 : $y + 75}
  text={`${Math.round($x)}, ${Math.round($y)}`}
  style={{ fill: 'white' }}
  anchor={0.5}
/>

<button on:click={reset}>Reset</button>

<style lang="postcss">
  button {
    @apply bg-slate-200 font-medium rounded mt-2 w-full;
  }
</style>
```
