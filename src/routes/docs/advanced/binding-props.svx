---
title: Binding Props
---

<script>
  import Code from '$lib/site/Code.svelte'
  import bballSrc from '$lib/site/BouncingBall.svelte?raw'
</script>

When PixiJS instances are mutated externally it would be helpful have its component props stay in sync (e.g. a physics system). Since we're using Svelte you might expect to be able to use the `bind:` syntax... but it won't work! The only bindable property for SveltePixi components is `instance`. Binding will have no effect for instance-related props.

Due to the nature of how `bind:` works, bound props are only updated when the Svelte component updates it internally. For SveltePixi, this would mean having to update each prop after every frame according to the instance value. Unfortunately this causes notable performance overhead because these components have a lot of props, and Svelte offers no way to do this on a per-bounded-prop bases.

As a workaround, most SveltePixi components provide a `track` prop. This lets us opt-in to "binding per-prop" -- however, it does work a bit differently.

## The Track Prop

`track` takes an object of writable stores where each key is the prop you want to "bind" to. Those stores get updated to match the instance's value after every tick. You can use those same stores for its props, effectively achieving binding behaviour.

It's not as nice as the `bind:` syntax but it is significantly more performant.

```svelte example csr
<script>
  import * as PIXI from 'pixi.js'
  import { Container, Text, onTick, Graphics } from 'svelte-pixi'
  import { writable } from 'svelte/store'
  import BouncePhysics from '$lib/site/BouncePhysics.svelte'

  // tracked properties must be writables
  let x = writable(200)
  let y = writable(200)
</script>

<Graphics
  x={$x}
  y={$y}
  track={{ x, y }}
  pivot={0.5}
  draw={(graphics) => {
    graphics.clear()
    graphics.beginFill(0xde3249)
    graphics.drawCircle(0, 0, 50)
    graphics.endFill()
  }}
>
  <!-- adds velocity to parent instance -->
  <BouncePhysics
    velocity={{
      x: Math.random() + 2,
      y: Math.random() + 2
    }}
  />
</Graphics>
<Text
  x={$x}
  y={$y >= 200 ? $y - 75 : $y + 75}
  text={`${Math.round($x)}, ${Math.round($y)}`}
  style={{ fill: 'white' }}
  anchor={0.5}
/>
```

## Caveats

- Only instance properties are trackable

  - If a component exposes a prop that is not assigned to the underlying PixiJS instance, it will not be tracked.

- Custom components need to pass `track` to their child SveltePixi components if you want to track through them (as BouncingBall does)

- If no Ticker exists in your application then `track` will update during the Renderer's `postrender` event.
