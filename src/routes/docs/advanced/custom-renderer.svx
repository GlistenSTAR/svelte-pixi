---
title: Custom Renderer
---

If you want more control over the rendering process, you can use the [Renderer](/docs/components/renderer) component instead of the [Application](/docs/components/application) component

`Renderer` will create the Pixi renderer and root container (the stage). However, you are responsible for calling the renderer's `render` method. Typically you would do this in a `Ticker`:

```svelte example csr noApp
<script>
  import { Renderer, Ticker, Text } from 'svelte-pixi'
  import DraggableCircle from './_/DraggableCircle.svelte'

  let renderer
  let stage
</script>

<Renderer
  bind:instance={renderer}
  bind:stage={stage}
  width={400}
  height={400}
  antialias
>
  <Ticker
    on:tick={() => {
      renderer.render(stage)
    }}
  />
  <Text
    x={200}
    y={300}
    text="Click and drag"
    style={{ fill: 'white' }}
    anchor={0.5}
  />
  <DraggableCircle x={200} y={200} />
</Renderer>
```

## Rendering without a Ticker

For one reason or another, you may not want to use a `Ticker` for rendering. Here's an example using `requestAnimationFrame` instead:

```svelte example csr noApp
<script>
  import { onMount } from 'svelte'
  import { Text, Renderer } from 'svelte-pixi'
  import DraggableCircle from './_/DraggableCircle.svelte'

  let renderer
  let stage
  let needsRender = false

  function render() {
    requestAnimationFrame(() => {
      renderer.render(stage)
      render()
    })
  }

  render()
</script>

<Renderer
  bind:instance={renderer}
  bind:stage={stage}
  width={400}
  height={400}
  antialias
>
  <Text
    x={200}
    y={300}
    text="Click and drag"
    style={{ fill: 'white' }}
    anchor={0.5}
  />
  <DraggableCircle x={200} y={200} />
</Renderer>

```

## Rendering on Svelte Updates

`Renderer` emits a `componentupdate` event whenever a svelte-pixi component is updated. You can use this to lazily render only when Svelte updates are applied:

```svelte example csr noApp
<script>
  import { onMount } from 'svelte'
  import { Text, Renderer } from 'svelte-pixi'
  import DraggableCircle from './_/DraggableCircle.svelte'
  let renderer
  let stage
  let needsRender = false

  function handleComponentUpdate() {
    // flag that a render is needed
    needsRender = true
  }

  function render() {
    // we still use requestAnimationFrame so we can cap the framerate
    requestAnimationFrame(() => {
      if (needsRender) {
        renderer.render(stage)
        needsRender = false
      }
      render()
    })
  }

  render()
</script>

<Renderer
  bind:instance={renderer}
  bind:stage={stage}
  width={400}
  height={400}
  antialias
  on:componentupdate={handleComponentUpdate}
>
  <Text
    x={200}
    y={300}
    text="Click and drag"
    style={{ fill: 'white' }}
    anchor={0.5}
  />
  <DraggableCircle x={200} y={200} />
</Renderer>
```

I generally do not recommend this unless you have good reason. This is more useful for apps that require few re-renders.
